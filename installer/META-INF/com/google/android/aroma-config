### FILE INFO:
#
# AROMA Installer 2.51
#       (c) 2011-2012 by Ahmad Amarullah
#           amarullz - xda-developers
#           http://www.amarullz.com/
#
#       Binary Version  : 2.56
#       Binary Codename : Edelweis
#
# tf700 dualboot installer configuration
#

# Initializing Rom Information
ini_set("rom_name",    "TF700 Dualboot Installer");
ini_set("rom_version", "v0.8.3");
ini_set("rom_author",  "Rabit");
ini_set("rom_device",  "Asus Transformer TF700/T");
ini_set("rom_date",    "27/08/2013");

setvar("terms_agreed", "0");

# Set theme
theme("miui");

# Show Splash
splash(
    2000,
    "logo"
);

# Extract cool busybox to /tmp/aroma/busybox
restotmp("exec/busybox","busybox");
restotmp("exec/start_install.sh","start_install.sh");
restotmp("exec/prepare_blob.sh","prepare_blob.sh");

# Set fonts
fontresload( "0", "ttf/Roboto-Regular.ttf", "12" ); #-- "0" = Small Font
fontresload( "1", "ttf/Roboto-Regular.ttf", "16" ); #-- "1" = Big Font

###################################################################################################################
# Set language
#
# SET LANGUAGE & FONT FAMILY
loadlang("langs/en.lang");


###################################################################################################################
# Print welcome screen
#
textbox(
    "<~welcome.title>",
    "<~welcome.text1> <b>"+
      ini_get("rom_name")+
    "</b> <~common.for> <b>"+ini_get("rom_device")+"</b>.\n\n",
    "@welcome",
    "<b><~welcome.installerinfo></b>:\n"+
      "  <~welcome.version>\t: <b><#selectbg_g>"+ini_get("rom_version")+"</#></b>\n" +
      "  <~welcome.updated>\t: <b><#selectbg_g>"+ini_get("rom_date")+"</#></b>\n" +
    "<b><~welcome.deviceinfo></b>:\n" +
      "  <~welcome.model>\t: <b><#selectbg_g>"+sysprop("ro.product.model")+"</#></b>\n" +
      "  <~welcome.name>\t: <b><#selectbg_g>"+sysprop("ro.product.name")+"</#></b>\n" +
      "  <~welcome.device>\t: <b><#selectbg_g>"+sysprop("ro.product.device")+"</#></b>\n" +
      "  <~welcome.board>\t: <b><#selectbg_g>"+sysprop("ro.product.board")+"</#></b>\n" +
      "  <~welcome.manufacturer>\t: <b><#selectbg_g>"+sysprop("ro.product.manufacturer")+"</#></b>\n\n" +
    "<~welcome.multiline>\n\n" +
    "<~welcome.next>"
);


###################################################################################################################
# Test device
#
if sysprop("ro.product.device")!="tf700" then
    if sysprop("ro.product.device")!="tf700t" then
        alert(
            "<~common.warning>",
            "<~isnotokdevice.info1>" + sysprop("ro.product.device") + "<~isnotokdevice.info2>" ,
            "@alert"
        );
    endif;
endif;

###################################################################################################################
# Some agreement
#
checkviewbox(
    "<~terms.title>",
    "<~terms.desc> <b><~text_next.default></b>\n\n<~terms.info>",
    "@license",
    "<~terms.check>",
    getvar("terms_agreed"),
    "terms_agreed"
);
if getvar("terms_agreed")!="1" then
    if confirm("<~terms.notconfirm.title>", "<~terms.notconfirm.info>", "@alert")=="yes" then
        exit();
    else
        back("1")
    endif;
endif;

###################################################################################################################
# Select kernel configuration
#
selectbox(
    "<~kernel.initrd.title>",
    "<~kernel.initrd.info>",
    "@personalize",
    "kernel.prop",
    "<~kernel.initrd.stock>", "<~kernel.initrd.stock.info>", 1, #-- "selected.0" == "1"
    "<~kernel.initrd.stock3>", "<~kernel.initrd.stock3.info>", 0, #-- "selected.0" == "2"
    "<~kernel.initrd.data2sd3>", "<~kernel.initrd.data2sd3.info>", 0, #-- "selected.0" == "3"
    "<~kernel.initrd.cm>", "<~kernel.initrd.cm.info>", 0, #-- "selected.0" == "4"
    "<~kernel.initrd.ubuntutouch>", "<~kernel.initrd.ubuntutouch.info>", 0, #-- "selected.0" == "5"
    "<~kernel.defaultsys.title>", "<~kernel.defaultsys.info>", 2,
    "<~kernel.defaultsys.linux>", "<~kernel.defaultsys.linux.info>", 1, #-- "selected.1" == "1"
    "<~kernel.defaultsys.basic>", "<~kernel.defaultsys.basic.info>", 0 #-- "selected.1" == "2"
);
# Write Multi config.sh file
write("/tmp/config.sh",
    "#!/bin/sh\n"+
    "export BOOT_VERSION='"+ini_get("rom_version")+" ("+ini_get("rom_date")+")'\n"+
    "export DEFAULT_SYS='"+iif(cmp("1","==", prop("kernel.prop","selected.1")),"Linux","Android")+"'\n"+
    "export BASIC_SYS_NAME='"+iif(cmp("1","==", prop("kernel.prop","selected.0")),"Android CleanRom v4.x",
        iif(cmp("2","==", prop("kernel.prop","selected.0")),"Android CleanRom v3.x",
        iif(cmp("3","==", prop("kernel.prop","selected.0")),"Android CleanRom v3.x + Data2SD",
        iif(cmp("4","==", prop("kernel.prop","selected.0")),"Android CyanogenMOD 10.x","Ubuntu-Touch"))))+"'\n"+
    "export SECOND_SYS_NAME='Linux'\n"
);

###################################################################################################################
# Destination of img selection
# * to virtual image in device main memory mmcblk0p8
# * to sdcard sda1
# * to sdcard sdb1
# * to msdcard mmcblk1
# * do not install image
#
setvar(
    "available_disks_retstatus",
    resexec("exec/available_disks.sh")
);
write("/tmp/linux-debug-available_disks.log", getvar("exec_buffer")+"\n\nRETURN STATUS : "+getvar("available_disks_retstatus"));

if cmp("1","==", getvar("available_disks_retstatus")) then
    alert(
        "<~common.error>",
        "<~nodiskavailable.info>",
        "@alert"
    );
    exit();
endif;

selectbox(
    "<~rootfs.title>",
    "<~rootfs.info>",
    "@default",
    "rootfs.prop",
    #-- "selected.0" == "1"
    "<~rootfs.itemskip_title>", "<~rootfs.itemskip_info>", 0,
    #-- "selected.0" == "2" Used by "Options"
    "/sdcard/linux/rootfs.img "+file_getprop("/tmp/available_disks.prop","available.mmcblk0p8.info")
        +" ("+file_getprop("/tmp/available_disks.prop","available.mmcblk0p8")
        +"Mb <~common.total>)", "<~rootfs.item1_info>", 1,
    #-- "selected.0" == "?" Used by available_size.sh
    "/dev/sda1 "+file_getprop("/tmp/available_disks.prop","available.sda.info")
        +" ("+file_getprop("/tmp/available_disks.prop","available.sda")
        +"Mb <~common.total>)", "<~rootfs.item2_info>", iif(cmp("1","<=", file_getprop("/tmp/available_disks.prop","available.sda")),0,3),
    #-- "selected.0" == "?" Used by available_size.sh
    "/dev/sdb1 "+file_getprop("/tmp/available_disks.prop","available.sdb.info")
        +" ("+file_getprop("/tmp/available_disks.prop","available.sdb")
        +"Mb <~common.total>)", "<~rootfs.item3_info>", iif(cmp("1","<=", file_getprop("/tmp/available_disks.prop","available.sdb")),0,3),
    #-- "selected.0" == "?" Used by available_size.sh
    "/dev/mmcblk1p1 "+file_getprop("/tmp/available_disks.prop","available.mmcblk1.info")
        +" ("+file_getprop("/tmp/available_disks.prop","available.mmcblk1")
        +"Mb <~common.total>)", "<~rootfs.item4_info>", iif(cmp("1","<=", file_getprop("/tmp/available_disks.prop","available.mmcblk1")),0,3)
);

# Write basic install_exit.prop file
write("/tmp/install_exit.prop",
    "exit=1\n"+
    "message=ERROR: installation script not started!\n"
);

if cmp("1","==", prop("rootfs.prop","selected.0")) then
    # Write install.prop file to prevent hang on skip
    write("/tmp/install.prop",
        "install.rootfs_name=\n"+
        "install.rootfs_dev=\n"+
        "install.disk=\n"+
        "install.dev=\n"+
        "install.to=\n"+
        "install.moveto=\n"+
        "install.rootsize=\n"
    );

    # Write options.prop tmp file to prevent hang on skip
    writetmpfile("options.prop",
        "item.0.1=1\n"+
        "item.0.2=0\n"+
        "item.1.1=1\n"
    );

    # ReWrite basic install_exit.prop file
    write("/tmp/install_exit.prop",
        "exit=0\n"+
        "message=\n"
    );
else
    ###################################################################################################################
    # Options
    # [] Use mmcblk0p8 as /home
    # [] Encrypt rootfs disk
    # - VD Suboptions
    # [] Do not replace virtual disk image
    #
    checkbox(
        "<~options.title>",
        "<~options.info>",
        "@update",
        "options.prop",

        "<~options.item1_title>", "<~options.item1_info>", 1, #-- item.0.1
#       TODO: Not implemented yet
#        "<~options.item2_title>", "<~options.item2_info>", 0, #-- item.0.2
        "<~options.vd_title>", "<~options.vd_info>", iif(cmp("2","==", prop("rootfs.prop","selected.0")),2,3), #-- item.1
        "<~options.vd_item1_title>", "<~options.vd_item1_info> /sdcard/linux/rootfs.img <~common.to> /sdcard/linux/rootfs-old.img", iif(cmp("2","==", prop("rootfs.prop","selected.0")),1,3) #-- item.1.1 used by exec/available_space.sh
    );

    ###################################################################################################################
    # Image size
    #
    setvar(
        "available_space_retstatus",
        resexec("exec/available_space.sh")
    );
    write("/tmp/linux-debug-available_space.log", getvar("exec_buffer")+"\n\nRETURN STATUS : "+getvar("available_space_retstatus"));

    if cmp("3",">", getvar("available_space_retstatus")) then
        alert(
            "<~common.error>",
            "<~nospaceavailable.info1> " + getvar("available_space_retstatus") + "Gb <~nospaceavailable.info2>",
            "@alert"
        );
        back("2"); #-- Go back to device select
    endif;

    selectbox(
        "<~rootsize.title>",
        "<~rootsize.info>",
        "@default",
        "rootsize.prop",
        "3 Gb", "",  1,  #-- "selected.0" == "1"
        "4 Gb", "",  iif(cmp("4","<=", getvar("available_space_retstatus")),1,3),  #-- "selected.0" == "2"
        "5 Gb", "",  iif(cmp("5","<=", getvar("available_space_retstatus")),1,3),  #-- "selected.0" == "3"
        "6 Gb", "",  iif(cmp("6","<=", getvar("available_space_retstatus")),0,3),  #-- "selected.0" == "4"
        "7 Gb", "",  iif(cmp("7","<=", getvar("available_space_retstatus")),0,3),  #-- "selected.0" == "5"
        "8 Gb", "",  iif(cmp("8","<=", getvar("available_space_retstatus")),0,3),  #-- "selected.0" == "6"
        "10 Gb", "", iif(cmp("10","<=", getvar("available_space_retstatus")),0,3), #-- "selected.0" == "7"
        "12 Gb", "", iif(cmp("12","<=", getvar("available_space_retstatus")),0,3), #-- "selected.0" == "8"
        "15 Gb", "", iif(cmp("15","<=", getvar("available_space_retstatus")),0,3), #-- "selected.0" == "9"
        "20 Gb", "", iif(cmp("20","<=", getvar("available_space_retstatus")),0,3)  #-- "selected.0" == "10"
    );
    setvar(
        "root_size_retstatus",
        resexec("exec/root_size.sh")
    );

    ###################################################################################################################
    # Select rootfs source archive file
    #
    setvar(
        "available_rootfs_retstatus",
        resexec("exec/available_rootfs.sh")
    );
    write("/tmp/linux-debug-available_rootfs.log", getvar("exec_buffer")+"\n\nRETURN STATUS : "+getvar("available_rootfs_retstatus"));

    if cmp("0","==", getvar("available_rootfs_retstatus")) then
        alert(
            "<~common.error>",
            "<~rootfs_source.notavailable> 'rootfs-' <~rootfs_source.notavailable2> '.tar.lzma', '.tar.bz2', '.tar.gz' <~common.or> '.tar.xz') <~rootfs_source.notavailable3>",
            "@alert"
        );
        back("2");
    else
        if cmp("1","==", getvar("available_rootfs_retstatus")) then
            alert(
                "<~common.info>",
                "<~rootfs_source.oneavailable> '"+file_getprop("/tmp/available_rootfs.prop","available.rootfs1.name")+"' ("
                    +file_getprop("/tmp/available_rootfs.prop","available.rootfs1.size")+") <~common.on> "
                    +file_getprop("/tmp/available_rootfs.prop","available.rootfs1.disk")+" <~rootfs_source.oneavailable2>",
                "@alert"
            );
            write("/tmp/aroma-data/rootfs_source.prop", "selected.0=1");
        else
            selectbox(
                "<~rootfs_source.title>",
                "<~rootfs_source.info>",
                "@default",
                "rootfs_source.prop",
                #-- "selected.0" == "1"
                file_getprop("/tmp/available_rootfs.prop","available.rootfs1.name")+" ("+file_getprop("/tmp/available_rootfs.prop","available.rootfs1.size")
                    +"Mb)", file_getprop("/tmp/available_rootfs.prop","available.rootfs1.disk"), 1,
                #-- "selected.0" == "2"
                file_getprop("/tmp/available_rootfs.prop","available.rootfs2.name")+" ("+file_getprop("/tmp/available_rootfs.prop","available.rootfs2.size")
                    +"Mb)", file_getprop("/tmp/available_rootfs.prop","available.rootfs2.disk"), iif(cmp("1","<=", file_getprop("/tmp/available_rootfs.prop","available.rootfs2.size")),0,3),
                #-- "selected.0" == "3"
                file_getprop("/tmp/available_rootfs.prop","available.rootfs3.name")+" ("+file_getprop("/tmp/available_rootfs.prop","available.rootfs3.size")
                    +"Mb)", file_getprop("/tmp/available_rootfs.prop","available.rootfs3.disk"), iif(cmp("1","<=", file_getprop("/tmp/available_rootfs.prop","available.rootfs3.size")),0,3),
                #-- "selected.0" == "4"
                file_getprop("/tmp/available_rootfs.prop","available.rootfs4.name")+" ("+file_getprop("/tmp/available_rootfs.prop","available.rootfs4.size")
                    +"Mb)", file_getprop("/tmp/available_rootfs.prop","available.rootfs4.disk"), iif(cmp("1","<=", file_getprop("/tmp/available_rootfs.prop","available.rootfs4.size")),0,3),
                #-- "selected.0" == "5"
                file_getprop("/tmp/available_rootfs.prop","available.rootfs5.name")+" ("+file_getprop("/tmp/available_rootfs.prop","available.rootfs5.size")
                    +"Mb)", file_getprop("/tmp/available_rootfs.prop","available.rootfs5.disk"), iif(cmp("1","<=", file_getprop("/tmp/available_rootfs.prop","available.rootfs5.size")),0,3),
                #-- "selected.0" == "6"
                file_getprop("/tmp/available_rootfs.prop","available.rootfs6.name")+" ("+file_getprop("/tmp/available_rootfs.prop","available.rootfs6.size")
                    +"Mb)", file_getprop("/tmp/available_rootfs.prop","available.rootfs6.disk"), iif(cmp("1","<=", file_getprop("/tmp/available_rootfs.prop","available.rootfs6.size")),0,3),
                #-- "selected.0" == "7"
                file_getprop("/tmp/available_rootfs.prop","available.rootfs7.name")+" ("+file_getprop("/tmp/available_rootfs.prop","available.rootfs7.size")
                    +"Mb)", file_getprop("/tmp/available_rootfs.prop","available.rootfs7.disk"), iif(cmp("1","<=", file_getprop("/tmp/available_rootfs.prop","available.rootfs7.size")),0,3),
                #-- "selected.0" == "8"
                file_getprop("/tmp/available_rootfs.prop","available.rootfs8.name")+" ("+file_getprop("/tmp/available_rootfs.prop","available.rootfs8.size")
                    +"Mb)", file_getprop("/tmp/available_rootfs.prop","available.rootfs8.disk"), iif(cmp("1","<=", file_getprop("/tmp/available_rootfs.prop","available.rootfs8.size")),0,3),
                #-- "selected.0" == "9"
                file_getprop("/tmp/available_rootfs.prop","available.rootfs9.name")+" ("+file_getprop("/tmp/available_rootfs.prop","available.rootfs9.size")
                    +"Mb)", file_getprop("/tmp/available_rootfs.prop","available.rootfs9.disk"), iif(cmp("1","<=", file_getprop("/tmp/available_rootfs.prop","available.rootfs9.size")),0,3)
            );
        endif;
        setvar(
            "selected_rootfs_retstatus",
            resexec("exec/selected_rootfs.sh")
        );
        write("/tmp/linux-debug-selected_rootfs.log", getvar("exec_buffer")+"\n\nRETURN STATUS : "+getvar("selected_rootfs_retstatus"));
    endif;
endif;

###################################################################################################################
# Preferences setting print, red button to install
#
ini_set("text_next", "<~ready.install>");
viewbox(
    "<~ready.title>",
    "<~ready.info>\n\n"+iif(cmp("1","!=", prop("rootfs.prop","selected.0")),
        "<b><~ready.params></b>:"
            +"\n  <~ready.rootfs>\t: <#selectbg_g>'"+file_getprop("/tmp/install.prop","install.rootfs_name")+"' ("+file_getprop("/tmp/install.prop","install.rootfs_dev")+")</#>"
            +"\n  <~ready.install_disk>\t: <#selectbg_g>"+file_getprop("/tmp/install.prop","install.disk")+" ("+file_getprop("/tmp/install.prop","install.dev")+")</#>"
            +"\n  <~ready.install_path>\t: <#selectbg_g>"+file_getprop("/tmp/install.prop","install.to")+"</#>"
            +iif(cmp("1","==", prop("options.prop","item.1.1")), "\n  <~ready.install_oldmove>\t: <#selectbg_g>"+file_getprop("/tmp/install.prop","install.moveto")+"</#>", "")
            +"\n  <~ready.install_size>\t: <#selectbg_g>"+file_getprop("/tmp/install.prop","install.rootsize")+"Gb</#>"
            +"\n  <~ready.home_separate>\t: <#selectbg_g>"+iif(cmp("1","==", prop("options.prop","item.0.1")), "<~ready.home_separated>", "<~ready.home_notseparated>")+"</#>"
#            TODO: Not implemented yet
#            +"\n  <b><~ready.root_encrypt></b>\t: <#selectbg_g>"+iif(prop("options.prop","item.0.2"), "<~ready.root_encrypted>", "<~ready.root_notencrypted>")+"</#>"
        , "<b><~ready.skiprootinstall></b>.")
    +"\n\n<~ready.endinfo> <b><~ready.install></b> <~ready.endinfo2> <b><~text_back></b>.",
    "@install"
);

ini_set("text_next", "<~text_next.default>");

###################################################################################################################
# INSTALLATION PROCESS
#
setvar("retstatus",
  install(
      "<~install.title>",
      "<b>"+ini_get("rom_name")+"</b> <~install.info> (~10 <~common.min>)",
      "@install",
      "<~install.finish> <b>"+ini_get("rom_name")+"</b>. <~install.finish2> <b><~text_next></b> <~install.finish3>"
  )
);

if prop("rootfs.prop","selected.0")!=1 then
    setvar("retstatus",file_getprop("/tmp/install_exit.prop","exit"));
endif;

###################################################################################################################
# Finish screen
#
ini_set("text_next", "Finish");
checkviewbox(
    "<~finish.title>",
    iif(cmp("0","==",getvar("retstatus")),
        "<#0a0><b><~finish.congrat></b></#>",
        "<#a00><b><~finish.fail>:</b></#>\n"+file_getprop("/tmp/install_exit.prop","message"))
    +"\n\n<b>"+ini_get("rom_name")+"</b> <~finish.info>: "+getvar("retstatus")+"\n\n",
    "@welcome",
    "<~finish.reboot>",
    "1",
    "reboot_it"
);

# Check if reboot checkbox was checked
if getvar("reboot_it")=="1" then
  reboot("onfinish");
endif;

#---- FINISH
